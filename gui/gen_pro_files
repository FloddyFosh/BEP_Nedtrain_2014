#!/usr/bin/env python

# Dit script is om de pro-files application/application.pro
# en testsuite/testsuite.pro synchroon te houden.
# Het nedtrain.pro bestand wordt ook gegenereerd.
# De header-files worden uit './headers.list' gelezen.
# De source-files worden uit './sources.list' gelezen.

import sys

def opslaan_in_bestand(filename, contents):
	f = open(filename, "w")
	(sys.stdout, f) = (f, sys.stdout)
	print contents
	(sys.stdout, f) = (f, sys.stdout)
	f.close()

contents_nedtrain = """
TEMPLATE = subdirs
SUBDIRS = testsuite application
testsuite.depends = application
"""
opslaan_in_bestand("nedtrain.pro",contents_nedtrain)

contents_common = """
OBJECTS_DIR = __obj__
MOC_DIR = __moc__

QT += sql
TRANSLATIONS = $$RELPAD$$/translations/lang_nedtrain.ts $$RELPAD$$/translations/lang_english.ts

BISONSOURCES = $$RELPAD$$/util/grammar.y
bison.commands = bison \
    -d \
    ${QMAKE_FILE_IN} \
    -o \
    $$RELPAD$$/util/grammar.tab.cpp
bison.input = BISONSOURCES
bison.output = $$RELPAD$$/util/grammar.tab.cpp
bison.variable_out = SOURCES
bison.name = bison
QMAKE_EXTRA_COMPILERS += bison
bisonheader.commands = @true
bisonheader.input = BISONSOURCES
bisonheader.output = $$RELPAD$$/util/grammar.tab.hpp
bisonheader.variable_out = HEADERS
bisonheader.name = bison \
    header
bisonheader.depends = $$RELPAD$$/util/grammar.tab.cpp
QMAKE_EXTRA_COMPILERS += bisonheader
OTHER_FILES += $$RELPAD$$/util/grammar.y
"""

args = sys.argv[1:]
if "-cache" in args:
	contents_application = """
TARGET = application
QMAKE_CXX = ccache g++
#QMAKE_CXXFLAGS += -m32
#QMAKE_LFLAGS += -m32
"""
else:
	contents_application = """
TARGET = application
QMAKE_CXX = g++
#QMAKE_CXXFLAGS += -m32
#QMAKE_LFLAGS += -m32
"""

if "-cache" in args:
	contents_testsuite = """
TARGET = testsuite
SOURCES += testsuite.cpp
INCLUDEPATH += ./gtest-1.6.0/include ../application
LIBS += -lgcov
LIBS += ./libgtest.a
CONFIG += qtestlib
QMAKE_CXX = ./fake-compiler
#QMAKE_CXXFLAGS += -g -cache -m32
QMAKE_CXXFLAGS += -g -cache 
#QMAKE_LFLAGS += -m32
"""
else:
	contents_testsuite = """
TARGET = testsuite
SOURCES += testsuite.cpp
INCLUDEPATH += ./gtest-1.6.0/include ../application
LIBS += -lgcov
LIBS += ./libgtest.a
CONFIG += qtestlib
QMAKE_CXX = ./fake-compiler
#QMAKE_CXXFLAGS += -g -m32
QMAKE_CXXFLAGS += -g 
#QMAKE_LFLAGS += -m32
"""

headers_txt = "HEADERS += " + " \\\n".join(["$$RELPAD$$/" + x for x in file("headers.list").read().split()]) + "\n\n"

sources_files = file("sources.list").read().split()
sources_txt = "SOURCES += " + " \\\n".join(["$$RELPAD$$/" + x for x in sources_files]) + "\n\n"
opslaan_in_bestand("application/application.pro", (contents_common + contents_application + headers_txt + sources_txt).replace("$$RELPAD$$","."))

sources_files.remove("main.cpp")
sources_txt = "SOURCES += " + " \\\n".join(["$$RELPAD$$/" + x for x in sources_files]) + "\n\n"
tests_txt = "HEADERS += " + " \\\n".join(file("tests.list").read().split())
opslaan_in_bestand("testsuite/testsuite.pro",     (contents_common + contents_testsuite   + headers_txt + sources_txt + tests_txt).replace("$$RELPAD$$","../application"))

print "application.pro and testsuite.pro generated; now update language files\n"
import os
os.system("cd application && lrelease application.pro && cd ../")
